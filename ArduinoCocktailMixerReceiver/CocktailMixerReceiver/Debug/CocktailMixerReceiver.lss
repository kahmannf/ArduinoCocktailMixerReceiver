
CocktailMixerReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800116  00800116  000007d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007132  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000164e  00000000  00000000  00007bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b2  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006f8  00000000  00000000  0000a6d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e69  00000000  00000000  0000adcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002671  00000000  00000000  0000cc35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000f2a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_18>
  4c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	80 02       	muls	r24, r16

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ec e2       	ldi	r30, 0x2C	; 44
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 31       	cpi	r26, 0x16	; 22
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a6 e1       	ldi	r26, 0x16	; 22
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 3b       	cpi	r26, 0xBE	; 190
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 8e 03 	call	0x71c	; 0x71c <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 ae 02 	call	0x55c	; 0x55c <main>
  b6:	0c 94 94 03 	jmp	0x728	; 0x728 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <setup>:

void toggle_pin(int, int);

void setup() 
{
	DDRD = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  c2:	84 b9       	out	0x04, r24	; 4
	
	PORTD = 0b11111100;
  c4:	8c ef       	ldi	r24, 0xFC	; 252
  c6:	8b b9       	out	0x0b, r24	; 11

	PORTB = 0b00011111;
  c8:	8f e1       	ldi	r24, 0x1F	; 31
  ca:	85 b9       	out	0x05, r24	; 5
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  cc:	26 e0       	ldi	r18, 0x06	; 6
  ce:	40 e8       	ldi	r20, 0x80	; 128
  d0:	55 e2       	ldi	r21, 0x25	; 37
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN14HardwareSerial5beginEmh>
	
	Serial.begin(9600);

	current_beverage = -1;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
  e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
  ea:	08 95       	ret

000000ec <_Z10toggle_pinii>:
		B2: 8
		B3: 9
		B4: 10
	 */

	 if(slot < 6) //D-Register
  ec:	86 30       	cpi	r24, 0x06	; 6
  ee:	91 05       	cpc	r25, r1
  f0:	d4 f4       	brge	.+52     	; 0x126 <_Z10toggle_pinii+0x3a>
  f2:	02 96       	adiw	r24, 0x02	; 2
	 {
		if(state == 0)
		{
			PORTD |= (1<<(slot + 2));
  f4:	4b b1       	in	r20, 0x0b	; 11
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
		B4: 10
	 */

	 if(slot < 6) //D-Register
	 {
		if(state == 0)
  fa:	67 2b       	or	r22, r23
  fc:	49 f4       	brne	.+18     	; 0x110 <_Z10toggle_pinii+0x24>
		{
			PORTD |= (1<<(slot + 2));
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <_Z10toggle_pinii+0x1a>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <_Z10toggle_pinii+0x16>
 10a:	cb 01       	movw	r24, r22
 10c:	84 2b       	or	r24, r20
 10e:	09 c0       	rjmp	.+18     	; 0x122 <_Z10toggle_pinii+0x36>
		}
		else
		{
			PORTD &= ~(1<<(slot + 2));
 110:	b9 01       	movw	r22, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <_Z10toggle_pinii+0x2c>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	8a 95       	dec	r24
 11a:	e2 f7       	brpl	.-8      	; 0x114 <_Z10toggle_pinii+0x28>
 11c:	cb 01       	movw	r24, r22
 11e:	80 95       	com	r24
 120:	84 23       	and	r24, r20
 122:	8b b9       	out	0x0b, r24	; 11
 124:	08 95       	ret
 126:	06 97       	sbiw	r24, 0x06	; 6
	 }
	 else if(slot > 5)
	 {
		if(state == 0)
		{
			PORTB |= (1<<(slot - 6));
 128:	45 b1       	in	r20, 0x05	; 5
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
			PORTD &= ~(1<<(slot + 2));
		}
	 }
	 else if(slot > 5)
	 {
		if(state == 0)
 12e:	67 2b       	or	r22, r23
 130:	49 f4       	brne	.+18     	; 0x144 <_Z10toggle_pinii+0x58>
		{
			PORTB |= (1<<(slot - 6));
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <_Z10toggle_pinii+0x4e>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <_Z10toggle_pinii+0x4a>
 13e:	cb 01       	movw	r24, r22
 140:	84 2b       	or	r24, r20
 142:	09 c0       	rjmp	.+18     	; 0x156 <_Z10toggle_pinii+0x6a>
		}
		else
		{
			PORTB &= ~(1<<(slot - 6));
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <_Z10toggle_pinii+0x60>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <_Z10toggle_pinii+0x5c>
 150:	cb 01       	movw	r24, r22
 152:	80 95       	com	r24
 154:	84 23       	and	r24, r20
 156:	85 b9       	out	0x05, r24	; 5
 158:	08 95       	ret

0000015a <loop>:
{
	// put your main code here, to run repeatedly:
	//
	//if(transmission_counter == -1)
		//return;
	if(Serial.available() > 0)
 15a:	88 e1       	ldi	r24, 0x18	; 24
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN14HardwareSerial9availableEv>
 162:	18 16       	cp	r1, r24
 164:	19 06       	cpc	r1, r25
 166:	7c f5       	brge	.+94     	; 0x1c6 <loop+0x6c>
	{
		//toggle_pin(3, 1);
		if(slot == -1)
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <slot>
 16c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <slot+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	49 f4       	brne	.+18     	; 0x186 <loop+0x2c>
		{
			slot = Serial.read();
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN14HardwareSerial4readEv>
 17c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <slot+0x1>
 180:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <slot>
 184:	08 c0       	rjmp	.+16     	; 0x196 <loop+0x3c>
		}
		else
		{
			state = Serial.read();
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_ZN14HardwareSerial4readEv>
 18e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}

		if(state != -1)
 196:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 19a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 19e:	6f 3f       	cpi	r22, 0xFF	; 255
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	78 07       	cpc	r23, r24
 1a4:	81 f0       	breq	.+32     	; 0x1c6 <loop+0x6c>
		{
			toggle_pin(slot, state);
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <slot>
 1aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <slot+0x1>
 1ae:	0e 94 76 00 	call	0xec	; 0xec <_Z10toggle_pinii>

			slot = -1;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <slot+0x1>
 1ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <slot>
			state = -1;
 1be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1c6:	08 95       	ret

000001c8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 1c8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 1ca:	91 8d       	ldd	r25, Z+25	; 0x19
 1cc:	22 8d       	ldd	r18, Z+26	; 0x1a
 1ce:	89 2f       	mov	r24, r25
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 5c       	subi	r24, 0xC0	; 192
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	82 1b       	sub	r24, r18
 1d8:	91 09       	sbc	r25, r1
}
 1da:	8f 73       	andi	r24, 0x3F	; 63
 1dc:	99 27       	eor	r25, r25
 1de:	08 95       	ret

000001e0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 1e0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 1e2:	91 8d       	ldd	r25, Z+25	; 0x19
 1e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 1e6:	98 17       	cp	r25, r24
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 1ea:	82 8d       	ldd	r24, Z+26	; 0x1a
 1ec:	e8 0f       	add	r30, r24
 1ee:	f1 1d       	adc	r31, r1
 1f0:	85 8d       	ldd	r24, Z+29	; 0x1d
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 1fa:	08 95       	ret

000001fc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 1fc:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1fe:	91 8d       	ldd	r25, Z+25	; 0x19
 200:	82 8d       	ldd	r24, Z+26	; 0x1a
 202:	98 17       	cp	r25, r24
 204:	61 f0       	breq	.+24     	; 0x21e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 206:	82 8d       	ldd	r24, Z+26	; 0x1a
 208:	df 01       	movw	r26, r30
 20a:	a8 0f       	add	r26, r24
 20c:	b1 1d       	adc	r27, r1
 20e:	5d 96       	adiw	r26, 0x1d	; 29
 210:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 212:	92 8d       	ldd	r25, Z+26	; 0x1a
 214:	9f 5f       	subi	r25, 0xFF	; 255
 216:	9f 73       	andi	r25, 0x3F	; 63
 218:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 222:	08 95       	ret

00000224 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 224:	fc 01       	movw	r30, r24
 226:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 228:	44 8d       	ldd	r20, Z+28	; 0x1c
 22a:	25 2f       	mov	r18, r21
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	84 2f       	mov	r24, r20
 230:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 232:	82 1b       	sub	r24, r18
 234:	93 0b       	sbc	r25, r19
 236:	54 17       	cp	r21, r20
 238:	10 f0       	brcs	.+4      	; 0x23e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 23a:	cf 96       	adiw	r24, 0x3f	; 63
 23c:	08 95       	ret
  return tail - head - 1;
 23e:	01 97       	sbiw	r24, 0x01	; 1
}
 240:	08 95       	ret

00000242 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 242:	86 e7       	ldi	r24, 0x76	; 118
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	89 2b       	or	r24, r25
 248:	49 f0       	breq	.+18     	; 0x25c <_Z14serialEventRunv+0x1a>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	89 2b       	or	r24, r25
 250:	29 f0       	breq	.+10     	; 0x25c <_Z14serialEventRunv+0x1a>
 252:	0e 94 76 02 	call	0x4ec	; 0x4ec <_Z17Serial0_availablev>
 256:	81 11       	cpse	r24, r1
 258:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 25c:	08 95       	ret

0000025e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 25e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 260:	84 8d       	ldd	r24, Z+28	; 0x1c
 262:	df 01       	movw	r26, r30
 264:	a8 0f       	add	r26, r24
 266:	b1 1d       	adc	r27, r1
 268:	a3 5a       	subi	r26, 0xA3	; 163
 26a:	bf 4f       	sbci	r27, 0xFF	; 255
 26c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 26e:	84 8d       	ldd	r24, Z+28	; 0x1c
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	8f 73       	andi	r24, 0x3F	; 63
 276:	99 27       	eor	r25, r25
 278:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 27a:	a6 89       	ldd	r26, Z+22	; 0x16
 27c:	b7 89       	ldd	r27, Z+23	; 0x17
 27e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 280:	a0 89       	ldd	r26, Z+16	; 0x10
 282:	b1 89       	ldd	r27, Z+17	; 0x11
 284:	8c 91       	ld	r24, X
 286:	80 64       	ori	r24, 0x40	; 64
 288:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 28a:	93 8d       	ldd	r25, Z+27	; 0x1b
 28c:	84 8d       	ldd	r24, Z+28	; 0x1c
 28e:	98 13       	cpse	r25, r24
 290:	06 c0       	rjmp	.+12     	; 0x29e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 292:	02 88       	ldd	r0, Z+18	; 0x12
 294:	f3 89       	ldd	r31, Z+19	; 0x13
 296:	e0 2d       	mov	r30, r0
 298:	80 81       	ld	r24, Z
 29a:	8f 7d       	andi	r24, 0xDF	; 223
 29c:	80 83       	st	Z, r24
 29e:	08 95       	ret

000002a0 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 2a0:	ef 92       	push	r14
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
  _written = true;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2b6:	98 13       	cpse	r25, r24
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <_ZN14HardwareSerial5writeEh+0x24>
 2ba:	e8 89       	ldd	r30, Y+16	; 0x10
 2bc:	f9 89       	ldd	r31, Y+17	; 0x11
 2be:	80 81       	ld	r24, Z
 2c0:	85 fd       	sbrc	r24, 5
 2c2:	24 c0       	rjmp	.+72     	; 0x30c <_ZN14HardwareSerial5writeEh+0x6c>
 2c4:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 2c6:	0b 8d       	ldd	r16, Y+27	; 0x1b
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	0f 5f       	subi	r16, 0xFF	; 255
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
 2ce:	0f 73       	andi	r16, 0x3F	; 63
 2d0:	11 27       	eor	r17, r17
 2d2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 2d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2d6:	e8 12       	cpse	r14, r24
 2d8:	0c c0       	rjmp	.+24     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	07 fc       	sbrc	r0, 7
 2de:	fa cf       	rjmp	.-12     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 2e0:	e8 89       	ldd	r30, Y+16	; 0x10
 2e2:	f9 89       	ldd	r31, Y+17	; 0x11
 2e4:	80 81       	ld	r24, Z
 2e6:	85 ff       	sbrs	r24, 5
 2e8:	f5 cf       	rjmp	.-22     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f0:	f1 cf       	rjmp	.-30     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 2f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2f4:	fe 01       	movw	r30, r28
 2f6:	e8 0f       	add	r30, r24
 2f8:	f1 1d       	adc	r31, r1
 2fa:	e3 5a       	subi	r30, 0xA3	; 163
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 300:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 302:	ea 89       	ldd	r30, Y+18	; 0x12
 304:	fb 89       	ldd	r31, Y+19	; 0x13
 306:	80 81       	ld	r24, Z
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	07 c0       	rjmp	.+14     	; 0x31a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 30c:	ee 89       	ldd	r30, Y+22	; 0x16
 30e:	ff 89       	ldd	r31, Y+23	; 0x17
 310:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 312:	e8 89       	ldd	r30, Y+16	; 0x10
 314:	f9 89       	ldd	r31, Y+17	; 0x11
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	08 95       	ret

0000032e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 334:	88 8d       	ldd	r24, Y+24	; 0x18
 336:	88 23       	and	r24, r24
 338:	c9 f0       	breq	.+50     	; 0x36c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 33a:	ea 89       	ldd	r30, Y+18	; 0x12
 33c:	fb 89       	ldd	r31, Y+19	; 0x13
 33e:	80 81       	ld	r24, Z
 340:	85 fd       	sbrc	r24, 5
 342:	05 c0       	rjmp	.+10     	; 0x34e <_ZN14HardwareSerial5flushEv+0x20>
 344:	a8 89       	ldd	r26, Y+16	; 0x10
 346:	b9 89       	ldd	r27, Y+17	; 0x11
 348:	8c 91       	ld	r24, X
 34a:	86 fd       	sbrc	r24, 6
 34c:	0f c0       	rjmp	.+30     	; 0x36c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	07 fc       	sbrc	r0, 7
 352:	f5 cf       	rjmp	.-22     	; 0x33e <_ZN14HardwareSerial5flushEv+0x10>
 354:	80 81       	ld	r24, Z
 356:	85 ff       	sbrs	r24, 5
 358:	f2 cf       	rjmp	.-28     	; 0x33e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 35a:	a8 89       	ldd	r26, Y+16	; 0x10
 35c:	b9 89       	ldd	r27, Y+17	; 0x11
 35e:	8c 91       	ld	r24, X
 360:	85 ff       	sbrs	r24, 5
 362:	ed cf       	rjmp	.-38     	; 0x33e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 364:	ce 01       	movw	r24, r28
 366:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 36a:	e7 cf       	rjmp	.-50     	; 0x33a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
 382:	6a 01       	movw	r12, r20
 384:	7b 01       	movw	r14, r22
 386:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 388:	e8 89       	ldd	r30, Y+16	; 0x10
 38a:	f9 89       	ldd	r31, Y+17	; 0x11
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 390:	41 15       	cp	r20, r1
 392:	51 4e       	sbci	r21, 0xE1	; 225
 394:	61 05       	cpc	r22, r1
 396:	71 05       	cpc	r23, r1
 398:	b1 f0       	breq	.+44     	; 0x3c6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	79 e0       	ldi	r23, 0x09	; 9
 39e:	8d e3       	ldi	r24, 0x3D	; 61
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	a7 01       	movw	r20, r14
 3a4:	96 01       	movw	r18, r12
 3a6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodsi4>
 3aa:	da 01       	movw	r26, r20
 3ac:	c9 01       	movw	r24, r18
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	b6 95       	lsr	r27
 3b6:	a7 95       	ror	r26
 3b8:	97 95       	ror	r25
 3ba:	87 95       	ror	r24
 3bc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 3be:	21 15       	cp	r18, r1
 3c0:	80 e1       	ldi	r24, 0x10	; 16
 3c2:	38 07       	cpc	r19, r24
 3c4:	a8 f0       	brcs	.+42     	; 0x3f0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 3c6:	e8 89       	ldd	r30, Y+16	; 0x10
 3c8:	f9 89       	ldd	r31, Y+17	; 0x11
 3ca:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 3cc:	60 e8       	ldi	r22, 0x80	; 128
 3ce:	74 e8       	ldi	r23, 0x84	; 132
 3d0:	8e e1       	ldi	r24, 0x1E	; 30
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	a7 01       	movw	r20, r14
 3d6:	96 01       	movw	r18, r12
 3d8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodsi4>
 3dc:	da 01       	movw	r26, r20
 3de:	c9 01       	movw	r24, r18
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	a1 09       	sbc	r26, r1
 3e4:	b1 09       	sbc	r27, r1
 3e6:	b6 95       	lsr	r27
 3e8:	a7 95       	ror	r26
 3ea:	97 95       	ror	r25
 3ec:	87 95       	ror	r24
 3ee:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 3f0:	ec 85       	ldd	r30, Y+12	; 0x0c
 3f2:	fd 85       	ldd	r31, Y+13	; 0x0d
 3f4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 3f6:	ee 85       	ldd	r30, Y+14	; 0x0e
 3f8:	ff 85       	ldd	r31, Y+15	; 0x0f
 3fa:	20 83       	st	Z, r18

  _written = false;
 3fc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 3fe:	ec 89       	ldd	r30, Y+20	; 0x14
 400:	fd 89       	ldd	r31, Y+21	; 0x15
 402:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 404:	ea 89       	ldd	r30, Y+18	; 0x12
 406:	fb 89       	ldd	r31, Y+19	; 0x13
 408:	80 81       	ld	r24, Z
 40a:	80 61       	ori	r24, 0x10	; 16
 40c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 40e:	ea 89       	ldd	r30, Y+18	; 0x12
 410:	fb 89       	ldd	r31, Y+19	; 0x13
 412:	80 81       	ld	r24, Z
 414:	88 60       	ori	r24, 0x08	; 8
 416:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 418:	ea 89       	ldd	r30, Y+18	; 0x12
 41a:	fb 89       	ldd	r31, Y+19	; 0x13
 41c:	80 81       	ld	r24, Z
 41e:	80 68       	ori	r24, 0x80	; 128
 420:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 422:	ea 89       	ldd	r30, Y+18	; 0x12
 424:	fb 89       	ldd	r31, Y+19	; 0x13
 426:	80 81       	ld	r24, Z
 428:	8f 7d       	andi	r24, 0xDF	; 223
 42a:	80 83       	st	Z, r24
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	08 95       	ret

0000043c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 450:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Serial+0x10>
 454:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Serial+0x11>
 458:	80 81       	ld	r24, Z
 45a:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <Serial+0x16>
 45e:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <Serial+0x17>
 462:	82 fd       	sbrc	r24, 2
 464:	12 c0       	rjmp	.+36     	; 0x48a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 466:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 468:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Serial+0x19>
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 470:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <Serial+0x1a>
 474:	82 17       	cp	r24, r18
 476:	51 f0       	breq	.+20     	; 0x48c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 478:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <Serial+0x19>
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e8 5e       	subi	r30, 0xE8	; 232
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 484:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Serial+0x19>
 488:	01 c0       	rjmp	.+2      	; 0x48c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 48a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4c2:	88 e1       	ldi	r24, 0x18	; 24
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 4ec:	88 e1       	ldi	r24, 0x18	; 24
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_ZN14HardwareSerial9availableEv>
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	89 2b       	or	r24, r25
 4f8:	09 f4       	brne	.+2      	; 0x4fc <_Z17Serial0_availablev+0x10>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
}
 4fc:	82 2f       	mov	r24, r18
 4fe:	08 95       	ret

00000500 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 500:	e8 e1       	ldi	r30, 0x18	; 24
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	13 82       	std	Z+3, r1	; 0x03
 506:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 508:	88 ee       	ldi	r24, 0xE8	; 232
 50a:	93 e0       	ldi	r25, 0x03	; 3
 50c:	a0 e0       	ldi	r26, 0x00	; 0
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	84 83       	std	Z+4, r24	; 0x04
 512:	95 83       	std	Z+5, r25	; 0x05
 514:	a6 83       	std	Z+6, r26	; 0x06
 516:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	91 83       	std	Z+1, r25	; 0x01
 51e:	80 83       	st	Z, r24
 520:	85 ec       	ldi	r24, 0xC5	; 197
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	95 87       	std	Z+13, r25	; 0x0d
 526:	84 87       	std	Z+12, r24	; 0x0c
 528:	84 ec       	ldi	r24, 0xC4	; 196
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	97 87       	std	Z+15, r25	; 0x0f
 52e:	86 87       	std	Z+14, r24	; 0x0e
 530:	80 ec       	ldi	r24, 0xC0	; 192
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	91 8b       	std	Z+17, r25	; 0x11
 536:	80 8b       	std	Z+16, r24	; 0x10
 538:	81 ec       	ldi	r24, 0xC1	; 193
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	93 8b       	std	Z+19, r25	; 0x13
 53e:	82 8b       	std	Z+18, r24	; 0x12
 540:	82 ec       	ldi	r24, 0xC2	; 194
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	95 8b       	std	Z+21, r25	; 0x15
 546:	84 8b       	std	Z+20, r24	; 0x14
 548:	86 ec       	ldi	r24, 0xC6	; 198
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	97 8b       	std	Z+23, r25	; 0x17
 54e:	86 8b       	std	Z+22, r24	; 0x16
 550:	11 8e       	std	Z+25, r1	; 0x19
 552:	12 8e       	std	Z+26, r1	; 0x1a
 554:	13 8e       	std	Z+27, r1	; 0x1b
 556:	14 8e       	std	Z+28, r1	; 0x1c
 558:	08 95       	ret

0000055a <initVariant>:
 55a:	08 95       	ret

0000055c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 55c:	0e 94 31 03 	call	0x662	; 0x662 <init>

	initVariant();
 560:	0e 94 ad 02 	call	0x55a	; 0x55a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 564:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 568:	c1 e2       	ldi	r28, 0x21	; 33
 56a:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 56c:	0e 94 ad 00 	call	0x15a	; 0x15a <loop>
		if (serialEventRun) serialEventRun();
 570:	20 97       	sbiw	r28, 0x00	; 0
 572:	e1 f3       	breq	.-8      	; 0x56c <main+0x10>
 574:	0e 94 21 01 	call	0x242	; 0x242 <_Z14serialEventRunv>
 578:	f9 cf       	rjmp	.-14     	; 0x56c <main+0x10>

0000057a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	6c 01       	movw	r12, r24
 58c:	7a 01       	movw	r14, r20
 58e:	8b 01       	movw	r16, r22
  size_t n = 0;
 590:	c0 e0       	ldi	r28, 0x00	; 0
 592:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 594:	ce 15       	cp	r28, r14
 596:	df 05       	cpc	r29, r15
 598:	81 f0       	breq	.+32     	; 0x5ba <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 59a:	d8 01       	movw	r26, r16
 59c:	6d 91       	ld	r22, X+
 59e:	8d 01       	movw	r16, r26
 5a0:	d6 01       	movw	r26, r12
 5a2:	ed 91       	ld	r30, X+
 5a4:	fc 91       	ld	r31, X
 5a6:	01 90       	ld	r0, Z+
 5a8:	f0 81       	ld	r31, Z
 5aa:	e0 2d       	mov	r30, r0
 5ac:	c6 01       	movw	r24, r12
 5ae:	09 95       	icall
 5b0:	89 2b       	or	r24, r25
 5b2:	11 f0       	breq	.+4      	; 0x5b8 <_ZN5Print5writeEPKhj+0x3e>
 5b4:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 5b6:	ee cf       	rjmp	.-36     	; 0x594 <_ZN5Print5writeEPKhj+0x1a>
 5b8:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 5ba:	c7 01       	movw	r24, r14
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	08 95       	ret

000005ce <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
 5e0:	af 93       	push	r26
 5e2:	bf 93       	push	r27
 5e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <timer0_millis>
 5e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <timer0_millis+0x1>
 5ec:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <timer0_millis+0x2>
 5f0:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <timer0_millis+0x3>
 5f4:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <timer0_fract>
 5f8:	23 e0       	ldi	r18, 0x03	; 3
 5fa:	23 0f       	add	r18, r19
 5fc:	2d 37       	cpi	r18, 0x7D	; 125
 5fe:	20 f4       	brcc	.+8      	; 0x608 <__vector_16+0x3a>
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	a1 1d       	adc	r26, r1
 604:	b1 1d       	adc	r27, r1
 606:	05 c0       	rjmp	.+10     	; 0x612 <__vector_16+0x44>
 608:	26 e8       	ldi	r18, 0x86	; 134
 60a:	23 0f       	add	r18, r19
 60c:	02 96       	adiw	r24, 0x02	; 2
 60e:	a1 1d       	adc	r26, r1
 610:	b1 1d       	adc	r27, r1
 612:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <timer0_fract>
 616:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <timer0_millis>
 61a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <timer0_millis+0x1>
 61e:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <timer0_millis+0x2>
 622:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <timer0_millis+0x3>
 626:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <timer0_overflow_count>
 62a:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <timer0_overflow_count+0x1>
 62e:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <timer0_overflow_count+0x2>
 632:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <timer0_overflow_count+0x3>
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	a1 1d       	adc	r26, r1
 63a:	b1 1d       	adc	r27, r1
 63c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <timer0_overflow_count>
 640:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <timer0_overflow_count+0x1>
 644:	a0 93 bc 01 	sts	0x01BC, r26	; 0x8001bc <timer0_overflow_count+0x2>
 648:	b0 93 bd 01 	sts	0x01BD, r27	; 0x8001bd <timer0_overflow_count+0x3>
 64c:	bf 91       	pop	r27
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 662:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 664:	84 b5       	in	r24, 0x24	; 36
 666:	82 60       	ori	r24, 0x02	; 2
 668:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 66a:	84 b5       	in	r24, 0x24	; 36
 66c:	81 60       	ori	r24, 0x01	; 1
 66e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 670:	85 b5       	in	r24, 0x25	; 37
 672:	82 60       	ori	r24, 0x02	; 2
 674:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 676:	85 b5       	in	r24, 0x25	; 37
 678:	81 60       	ori	r24, 0x01	; 1
 67a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 67c:	ee e6       	ldi	r30, 0x6E	; 110
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	81 60       	ori	r24, 0x01	; 1
 684:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 686:	e1 e8       	ldi	r30, 0x81	; 129
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 68c:	80 81       	ld	r24, Z
 68e:	82 60       	ori	r24, 0x02	; 2
 690:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 692:	80 81       	ld	r24, Z
 694:	81 60       	ori	r24, 0x01	; 1
 696:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 698:	e0 e8       	ldi	r30, 0x80	; 128
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 81       	ld	r24, Z
 69e:	81 60       	ori	r24, 0x01	; 1
 6a0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6a2:	e1 eb       	ldi	r30, 0xB1	; 177
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	84 60       	ori	r24, 0x04	; 4
 6aa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6ac:	e0 eb       	ldi	r30, 0xB0	; 176
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	80 81       	ld	r24, Z
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 6b6:	ea e7       	ldi	r30, 0x7A	; 122
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	84 60       	ori	r24, 0x04	; 4
 6be:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 6c0:	80 81       	ld	r24, Z
 6c2:	82 60       	ori	r24, 0x02	; 2
 6c4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 6c6:	80 81       	ld	r24, Z
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 6cc:	80 81       	ld	r24, Z
 6ce:	80 68       	ori	r24, 0x80	; 128
 6d0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 6d2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 6d6:	08 95       	ret

000006d8 <__udivmodsi4>:
 6d8:	a1 e2       	ldi	r26, 0x21	; 33
 6da:	1a 2e       	mov	r1, r26
 6dc:	aa 1b       	sub	r26, r26
 6de:	bb 1b       	sub	r27, r27
 6e0:	fd 01       	movw	r30, r26
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__udivmodsi4_ep>

000006e4 <__udivmodsi4_loop>:
 6e4:	aa 1f       	adc	r26, r26
 6e6:	bb 1f       	adc	r27, r27
 6e8:	ee 1f       	adc	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	a2 17       	cp	r26, r18
 6ee:	b3 07       	cpc	r27, r19
 6f0:	e4 07       	cpc	r30, r20
 6f2:	f5 07       	cpc	r31, r21
 6f4:	20 f0       	brcs	.+8      	; 0x6fe <__udivmodsi4_ep>
 6f6:	a2 1b       	sub	r26, r18
 6f8:	b3 0b       	sbc	r27, r19
 6fa:	e4 0b       	sbc	r30, r20
 6fc:	f5 0b       	sbc	r31, r21

000006fe <__udivmodsi4_ep>:
 6fe:	66 1f       	adc	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	1a 94       	dec	r1
 708:	69 f7       	brne	.-38     	; 0x6e4 <__udivmodsi4_loop>
 70a:	60 95       	com	r22
 70c:	70 95       	com	r23
 70e:	80 95       	com	r24
 710:	90 95       	com	r25
 712:	9b 01       	movw	r18, r22
 714:	ac 01       	movw	r20, r24
 716:	bd 01       	movw	r22, r26
 718:	cf 01       	movw	r24, r30
 71a:	08 95       	ret

0000071c <__tablejump2__>:
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	05 90       	lpm	r0, Z+
 722:	f4 91       	lpm	r31, Z
 724:	e0 2d       	mov	r30, r0
 726:	09 94       	ijmp

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
